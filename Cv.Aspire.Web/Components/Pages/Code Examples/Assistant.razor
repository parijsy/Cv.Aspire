@page "/assistant"
@rendermode InteractiveServer
@using Markdig;
@using Microsoft.SemanticKernel.ChatCompletion;

<PageTitle>Assistant</PageTitle>


<div class="container">
    <div class="row">
        <div class="col">
            <h1>Assistant</h1>
            <div class="alert alert-warning" role="alert">
               Wanneer er gebruik wordt gemaakt van function calling kan de assistent er lang over doen. 
               De timeout is om deze reden verhoogd naar 2 minuten.
            </div>
            <p>
                Dit is een voorbeeld van een eenvoudige chat applicatie die gebruik maakt van gpt-4o.
                Het zware werk wordt door <code>Semantic Kernel</code> gedaan, en omdat dit project met server-side blazor is gemaakt kan Semantic Kernel direct in de applicatie worden gebruikt.
                Het voordeel hiervan is dat er geen eigen API hoeft te zijn die de prompts doorzet en voor streaming responses hoeft er geen SignalR service opgetuigd te worden.
                Een nadeel is wel dat de chat applicatie nu gebonden is aan de front-end applicatie en niet herbruikbaar of eenvoudig te verplaatsen is naar een andere front-end applicatie.
            </p>
            <p>
                Bij het opzetten van deze demo ben ik in eerste instantie begonnen met de semantic kernel te plaatsen in de eigen API in plaats van direct in de front-end.
                Het plan was om met <code>Native Functions</code> de staat van wat HTML elementen aan te passen.
                In mijn YouTube feed kwam toevallig de video <a href="https://www.youtube.com/watch?v=z7V-_JVF_Zo" target="_blank">Build interactive AI-powered web apps with Blazor and .NET</a> van dotnet voorbij.
                Vanwege de eenvoud waarmee je de semantic kernel direct in een blazor server-side applicatie kan gebruiken ben ik n.a.v. deze video overstag gegaan en heb dat voorbeeld gevolgd.
                Zelfs het voorbeeld waarbij het thema van de sidebar kan worden aangepast is overgenomen.
            </p>
            <p>
                In dit voorbeeld zijn naast de <code>ThemePlugin</code> uit het voorbeeld van de YouTube video ook de <code>TimePlugin</code> en <code>WeatherPlugin</code> toegevoegd.
                De TimePlugin maakt het mogelijk om de huidige tijd op te vragen, en de WeatherPlugin maakt gebruik van de weerbericht functionaliteit waardoor je de assistant naar het huidige weer kan vragen voor een bepaalde plaats.
                Het aanroepen van methodes in de plugins wordt <code>function calling</code> genoemd.
            </p>
        </div>
    </div>

    <hr class="border-2 opacity-75 mt-0" />

    <div class="row">
        <div class="col">
        @foreach (var message in messages)
        {
            <div class="card mb-3 @(message.Role == AuthorRole.Assistant ? "text-bg-light" : "")">
                <div class="card-header">@message.Role.ToString()</div>
                <div class="card-body nopmargin">
                    @((MarkupString)Markdown.ToHtml(message.Message))
                    @if (message.IsStreaming)
                    {
                        <div class="spinner-grow" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    </div>
            </div>
        }
        @if (showAssistantAlert)
        {
            <div class="alert alert-danger" role="alert">
                Er is iets fout gegaan bij de communicatie met de assistent.
            </div>
        }
        </div>
    </div>

    <div class="row">
        <div class="mb-3">
            <InputTextArea class="form-control" placeholder="Stel een vraag" @bind-Value="prompt" rows="3" />
        </div>
        <div class="mb-3">
            <button class="btn btn-primary mb-3" @onclick="Submit">Verzend</button>
        </div>
    </div>

    <div class="row">
        <div class="col col-4">
            <h2>Voorbeeld vragen</h2>
        </div>
    </div>
    <div class="row">
        <div class="col col-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" value="Welke acties kun je voor mij uitvoeren?" disabled>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(e => SubmitQuestion("Welke acties kun je voor mij uitvoeren?"))">
                    @RenderQuestionIcon
                </button>
            </div>
        </div>
        <div class="col col-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" value="Hoe is het weer nu in Amsterdam?" disabled>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(e => SubmitQuestion("Hoe is het weer nu in Amsterdam?"))">
                    @RenderQuestionIcon
                </button>
            </div>
        </div>
        <div class="col col-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" value="Hoe laat is het nu?" disabled>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(e => SubmitQuestion("Hoe laat is het nu?"))">
                    @RenderQuestionIcon
                </button>
            </div>
        </div>
        <div class="col col-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" value="Pas de thema kleuren aan naar paars en groen" disabled>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(e => SubmitQuestion("Pas de thema kleuren aan naar paars en groen"))">
                    @RenderQuestionIcon
                </button>
            </div>
        </div>
        <div class="col col-8">
            <div class="input-group mb-3">
                <input type="text" class="form-control" value="Pas de thema kleuren aan naar zomerse kleuren, en leg uit waarom je deze kleuren hebt gekozen" disabled>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(e => SubmitQuestion("Pas de thema kleuren aan naar zomerse kleuren, en leg uit waarom je deze kleuren hebt gekozen"))">
                    @RenderQuestionIcon
                </button>
            </div>
        </div>
    </div>

</div>

@code {
    private RenderFragment RenderQuestionIcon = @<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-patch-question" viewBox="0 0 16 16">
        <path d="M8.05 9.6c.336 0 .504-.24.554-.627.04-.534.198-.815.847-1.26.673-.475 1.049-1.09 1.049-1.986 0-1.325-.92-2.227-2.262-2.227-1.02 0-1.792.492-2.1 1.29A1.7 1.7 0 0 0 6 5.48c0 .393.203.64.545.64.272 0 .455-.147.564-.51.158-.592.525-.915 1.074-.915.61 0 1.03.446 1.03 1.084 0 .563-.208.885-.822 1.325-.619.433-.926.914-.926 1.64v.111c0 .428.208.745.585.745" />
        <path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911z" />
        <path d="M7.001 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0" />
    </svg>;
}